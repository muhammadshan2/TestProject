using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.IO;
using System.Linq;
using System.Net.Mail;
using System.Security.Claims;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using AngularFirstApi.Helper;
using AngularFirstApi.Model;
using AngularFirstApi.Model.DBModel;
using AngularFirstApi.Model.ViewModel;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;

namespace AngularFirstApi.Controllers
{
    [Authorize]
    [Route("api/[controller]")]
    [ApiController]
    public class UserController : ControllerBase
    {
        private readonly ApplicationDbContext _context;
        private IUserService _userService;
        private ActiveUser _activeUser;
        public UserController(ApplicationDbContext context, ActiveUser activeUser,IUserService userService)
        {
            _context = context;
            _userService = userService;
            _activeUser = activeUser;
        }

        [HttpGet]
        public IActionResult Get()
        {
            var result = _userService.GetAll(_activeUser.UserId);
            if(result !=null)
            {
                return new JsonResult(result);
            }
            return NoContent();
        }

        [HttpGet("Profile")]
        public IActionResult GetUser()
        {
            var result = _userService.GetUser(_activeUser.UserId);
            if (result != null)
            {
                return new JsonResult(result);
            }
            return NoContent();
        }

        [AllowAnonymous]
        [HttpPost("Login")]
        public IActionResult Login(Login login)
        {
            var user = _userService.Authenticate(login);
            
            if(user == null)
            {
                return ValidationProblem("invalid user name or password");
            }
            var response = new
            {
                //user.UserId,
                //full_name = user.FirstName + " " + user.LastName,
                token = user.Token

            };
            return new JsonResult(response);
        }
        [HttpPost("Register")]
        public IActionResult Register(RegisterVM obj)
        {
            user User = new user();
            User.FirstName = obj.FirstName;
            User.LastName = obj.LastName;
            User.Email = obj.Email;
            User.Password = obj.Password;
            User.UserName = obj.UserName;
            User.RoleId = obj.RoleId;

            _context.Users.Add(User);
            _context.SaveChanges();
            return Ok();
        }
      
        
        [AllowAnonymous]
        [HttpPost("ForgotPassword")]
        public IActionResult ForgotPassword(forgotPassword model)
        {
            if (string.IsNullOrEmpty(model.email))
                return BadRequest();
            string encrpty = Encrypt("test@email.com#UserId#UserName#FirstName#LastName#"+DateTime.Now);
            string decrypt = Decrypt(encrpty);
            bool isMailSend = SendEmail(encrpty);
            var tokenTime = Convert.ToDateTime(decrypt.Split('#').LastOrDefault());
            bool isValid = false;
            if(tokenTime.AddMinutes(5) >=DateTime.Now)
            {
                isValid = true;
            }
            return new JsonResult(new {token = encrpty });
        }

        [AllowAnonymous]
        [HttpGet("Validate")]
        public IActionResult Validate(string query)
        {
            if (string.IsNullOrEmpty(query))
                return BadRequest();

            string decrypt = Decrypt(query);
            var tokenTime = decrypt.Split('#').LastOrDefault();
            var valid_time = Convert.ToDateTime(tokenTime).AddMinutes(5); 
            if(valid_time >= DateTime.Now)
            {
                return new JsonResult(new { status = true, Id = decrypt.Split("#")[2]}) ;

            }
            return new JsonResult(new { status = false });
        }

        private bool SendEmail(string token)
        {
            bool IsMailSent = false;
            try
            {
                string html = "<!doctype html><html lang='en-US'><head>" +
    "<meta content='text/html; charset=utf-8' http-equiv='Content-Type' />" +
    "<title>Reset Password Email Template</title>" +
     "<meta name='description' content='Reset Password Email Template.'> " +
    " <style type='text/css'> " +
         "a:hover {text-decoration: underline !important;}" +
     "</style> " +
 "</head> " +

 "< body marginheight='0' topmargin='0' marginwidth='0' style='margin: 0px; background-color: #f2f3f8;' leftmargin='0'> " +
   "  < !--100% body table--> " +
    " < table cellspacing='0' border='0' cellpadding='0' width='100%' bgcolor='#f2f3f8'" +
       "  style ='@import url(https://fonts.googleapis.com/css?family=Rubik:300,400,500,700|Open+Sans:300,400,600,700); font-family: 'Open Sans', sans-serif;'> " +
       "  < tr> " +
            " < td> " +
               "  < table style='background-color: #f2f3f8; max-width:670px;  margin:0 auto;' width='100%' border='0'" +
                 "    align ='center' cellpadding='0' cellspacing='0'> " +
                 "    < tr> " +
                 "        < td style='height:80px;'>&nbsp;</td> " +
                  "   </tr> " +
                   "  < tr> " +
                     "    < td style='text-align:center;'> " +
                      "     < a href='https://rakeshmandal.com' title='logo' target='_blank'> " +
                      "       < img width='60' src='https://i.ibb.co/hL4XZp2/android-chrome-192x192.png' title='logo' alt='logo'> " +
                        "   </a> " +
                       "  </td> " +
                  "   </tr> " +
                   "  < tr> " +
                      "   < td style='height:20px;'>&nbsp;</td> " +
                   "  </tr> " +
                   "  < tr> " +
                       "  < td> " +
                           "  < table width='95%' border='0' align='center' cellpadding='0' cellspacing='0'" +
                               "  style ='max-width:670px;background:#fff; border-radius:3px; text-align:center;-webkit-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);-moz-box-shadow:0 6px 18px 0 rgba(0,0,0,.06);box-shadow:0 6px 18px 0 rgba(0,0,0,.06);'> " +
                                " < tr>" +
                                  "   < td style='height:40px;'>&nbsp;</td>" +
                                " </tr>" +
                               "  < tr>" +
                                    " < td style='padding:0 35px;'>" +
                                       "  < h1 style='color:#1e1e2d; font-weight:500; margin:0;font-size:32px;font-family:'Rubik',sans-serif;'>You have" +
                                        "    requested to reset your password</h1> " +
                                       "  <span" +
                                          "   style ='display:inline-block; vertical-align:middle; margin:29px 0 26px; border-bottom:1px solid #cecece; width:100px;'></span>" +
                                        " <p style='color:#455056; font-size:15px;line-height:24px; margin:0;'>" +
                                           "  We cannot simply send you your old password. A unique link to reset your" +
                                           "  password has been generated for you. To reset your password, click the" +
                                          "   following link and follow the instructions." +
                                        " </p>" +
                                        " < a href='http://localhost:4200/auth/reset-password?query='"+ token+
                                          "   style ='background:#20e277;text-decoration:none !important; font-weight:500; margin-top:35px; color:#fff;text-transform:uppercase; font-size:14px;padding:10px 24px;display:inline-block;border-radius:50px;'>Reset" +
                                         "    Password </a>" +
                                    " </td>" +
                                " </tr>" +
                                " < tr>" +
                                "     < td style='height:40px;'>&nbsp;</td>" +
                              "   </tr>" +
                            " </table>" +
                        " </td>" +
                    " < tr>" +
                        " < td style='height:20px;'>&nbsp;</td>" +
                     "</tr>" +
                     "< tr>" +
                       "  < td style='text-align:center;'>" +
                        "     < p style='font-size:14px; color:rgba(69, 80, 86, 0.7411764705882353); line-height:18px; margin:0 0 0;'>&copy; <strong>www.rakeshmandal.com</strong></p>" +
                       "  </td>" +
                     "</tr>" +
                     "< tr>" +
                         "< td style='height:80px;'>&nbsp;</td>" +
                    " </tr>" +
                " </table>" +
             "</td>" +
         "</tr>" +
     "</table>" +
     "< !--/100% body table-->" +
 "</body>" +

 "</html>";
                SmtpClient smtp = new SmtpClient();
                smtp.Host = "10.10.30.99";// need to change on live 
                MailMessage mail = new MailMessage();
                mail.From = new MailAddress("talkehrexception@mtbc.com");
                mail.To.Add(new MailAddress("muhammadshan2@mtbc.com"));
                mail.Subject = "Test";
                mail.Body = html;
                mail.IsBodyHtml = true;
                mail.SubjectEncoding = Encoding.UTF8;
                smtp.Send(mail);
                mail.Attachments.Dispose();
                IsMailSent = true;
            }
            catch
            {
                IsMailSent = false;
            }
            return IsMailSent;
        }

        [HttpPost("ResetPassword")]
        public IActionResult ResetPassword(ResetPassword resetPassword)
        {
            return Ok();
        }

        [HttpPut]
        public IActionResult PutUser(int id ,[FromBody]UserDTO user)
        {
            var result = _context.Users.FirstOrDefault(s => s.UserId == id);
            if(result==null)
            {
                return NoContent();
            }
            result.FirstName = user.FirstName;
            result.LastName = user.LastName;
            result.Email = user.Email;

            if(user.Password != null)
            result.Password = user.Password;

            result.UserName = user.UserName;
            result.RoleId = user.RoleId;
            result.Mobile = user.Mobile;
            result.UserAddress = user.UserAddress;
            result.About = user.About;
            if (FileExtensions.IsImage(user.ImagePath))
            {
                var userIamge = FileHelper.UploadFile("Profile", user.ImagePath);
                if (userIamge != null)
                {
                    result.ImagePath = userIamge;
                }
            }
            _context.SaveChanges();
            
            return Ok();
        }

        [HttpDelete]
        public IActionResult DeleteUser(int id)
        {
            var result = _context.Users.FirstOrDefault(s => s.UserId == id);
            if (result == null)
            {
                return NoContent();
            }
            _context.Users.Remove(result);
            _context.SaveChanges();
            return Ok();
        }

        private String Encrypt(String plainText)
        {
            string passPhrase = "2595874569321569";
            var plainBytes = Encoding.UTF8.GetBytes(plainText);
            return Convert.ToBase64String(Encrypt(plainBytes, GetRijndaelManaged(passPhrase)));
        }
        private String Decrypt(String encryptedText)
        {
            string passPhrase = "2595874569321569";
            var encryptedBytes = Convert.FromBase64String(encryptedText);
            return Encoding.UTF8.GetString(Decrypt(encryptedBytes, GetRijndaelManaged(passPhrase)));
        }

        public static RijndaelManaged GetRijndaelManaged(String secretKey)
        {
            var keyBytes = new byte[16];
            var secretKeyBytes = Encoding.UTF8.GetBytes(secretKey);
            Array.Copy(secretKeyBytes, keyBytes, Math.Min(keyBytes.Length, secretKeyBytes.Length));
            return new RijndaelManaged
            {
                Mode = CipherMode.CBC,
                Padding = PaddingMode.PKCS7,
                KeySize = 128,
                BlockSize = 128,
                Key = keyBytes,
                IV = keyBytes
            };
        }

        private byte[] Encrypt(byte[] plainBytes, RijndaelManaged rijndaelManaged)
        {
            return rijndaelManaged.CreateEncryptor().TransformFinalBlock(plainBytes, 0, plainBytes.Length);
        }

        private byte[] Decrypt(byte[] encryptedData, RijndaelManaged rijndaelManaged)
        {
            return rijndaelManaged.CreateDecryptor().TransformFinalBlock(encryptedData, 0, encryptedData.Length);
        }


    }
}
